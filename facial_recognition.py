# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-3tan_s9ermFjLnl24xzxDa2fnNVpCp1
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)



from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/AI/Final/

import pandas as pd
import numpy as np

from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier as DTC
from sklearn.pipeline import Pipeline
from random import randint

df = pd.read_csv("disgust.csv")

df.head()

data=df.iloc[:,-35:]
data = data.sample(frac=1, random_state = 42).reset_index(drop = True)
data

aur = data.iloc[:,:17]
auc = data.iloc[:,17:34]
y = data.iloc[:,-1]
m = y.shape[0]


#xtrain, xtest, ytrain,ytest = train_test_split(aur,y,random_state = 42, stratify = y)

"""#GA Algorithm"""

def GA(ng = 5):
  global pop, fit
  pop = population()
  fit = []
  for i in range(20):
    fit.append(fitness(pop[i],i))
  #print(fit)
  for i in range(1):
    Xover()

"""##Population

"""

def individual(i):
  np.random.seed(42+i)
  return (np.random.choice([1,0],size=17)).tolist()

def population(count=20):
  return [individual(x) for x in range(count)]

GA()

"""#Fitness"""

def fitness(arr,i):
  ind = np.array(arr).reshape((1,17))
  mul = pd.DataFrame( np.ones((m,1)) @ ind )
  mod = pd.DataFrame(aur.values*mul.values,columns=aur.columns,index=aur.index)

  xtrain, xtest, ytrain, ytest = train_test_split(mod,y,random_state = 42, stratify = y)

  pipe = Pipeline([('clf',DTC())])
  params = {'clf__criterion':['gini', 'entropy']}
  gs = GridSearchCV(pipe, param_grid = params, cv = 5)
  gs.fit(xtrain,ytrain)
  crit = gs.best_params_['clf__criterion']

  clf = DTC(criterion=crit)
  clf.fit(xtrain, ytrain)
  acc = clf.score(xtest,ytest)

  '''
  #########################################################################################
  from sklearn.externals.six import StringIO
  from IPython.display import Image
  from sklearn.tree import export_graphviz
  import pydotplus
  feature_cols = aur.columns.tolist()
  dot_data = StringIO()
  export_graphviz(clf, out_file=dot_data,
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
  graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
  graph.write_png('dtc'+str(i+1)+'.png')
  #########################################################################################
  '''
  return acc

"""#Crossover"""

def Xover():
  global pop, fit

  zl = zip(fit, pop)
  sprs = sorted(zl)
  tuples = zip(*sprs)
  fit, pop = [list(tuple) for tuple in  tuples]
  pop2 = []
  for i in range(0,len(pop),2):
    xpos = random.ranint(0,17)
  print(fit, pop)

"""#Testing Functions"""

test=np.array([1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,0]).reshape((1,17))
testdf = pd.DataFrame(np.ones((350,1)) @ test)
testdf

pd.DataFrame(aur.values*testdf.values,columns=aur.columns,index=aur.index) #testing few functions

for x in range(0, 10, 2):
    print(x)

